{"code":"import { ShapeFlags } from \"@vueshared\";\nimport { componentPublicInstance } from \"./componentPublicIntance\";\n// 1. 创建组件实例\nexport const createComponentInstance = (vnode) => {\n    const instance = {\n        vnode,\n        type: vnode.type,\n        props: {}, //组件的属性\n        attrs: {},\n        setupState: {}, // setup返回的状态\n        ctx: {}, //代理\n        proxy: {}, // 代理\n        render: null, // 组件的render方法\n        data: { a: 1 }, // 组件的数据\n        isMounted: false, // 是否挂载\n    };\n    instance.ctx = { _: instance };\n    return instance;\n};\n// 2. 解析数据到这个实例对象上\nexport const setupComponent = (instance) => {\n    // 设置值\n    const { props, children } = instance.vnode;\n    // 根据props解析到组件实例上\n    instance.props = props; // initProps\n    instance.children = children; // 插槽\n    // 看一下这个组件是不是有setup函数\n    let isStateFlag = instance.vnode.shapeFlag & ShapeFlags.STATEFUL_COMPONENT;\n    if (isStateFlag) {\n        // 有状态组件\n        setupStatefulComponent(instance);\n    }\n};\n// 处理setup函数\nfunction setupStatefulComponent(instance) {\n    // 代理\n    instance.proxy = new Proxy(instance.ctx, componentPublicInstance);\n    // setup 可以是一个对象 也可以是一个函数\n    // 获取组件的类型  拿到setup 方法\n    let Component = instance.vnode.type;\n    let { setup } = Component;\n    // 看一下这个组件有没有setup  render\n    if (setup) {\n        // 执行setup\n        // 处理参数\n        let setupContext = createSetupContext(instance);\n        // 执行setup\n        let setupResult = setup(instance.props, setupContext);\n        // 问题 setupResult 可能是对象 也可能是函数\n        handlerSetupResult(instance, setupResult); // 如果是对象就是值 如果是函数就是render\n    }\n    else {\n        // 没有setup 直接执行render\n        finishComponentSetup(instance);\n    }\n    Component.render(instance.proxy);\n}\n// 处理setup返回的结果\nfunction handlerSetupResult(instance, setupResult) {\n    if (typeof setupResult === \"object\") {\n        instance.setupState = setupResult;\n    }\n    else if (typeof setupResult === \"function\") {\n        instance.render = setupResult;\n    }\n    // 走render方法\n    finishComponentSetup(instance);\n}\n// 处理完setup后 走render方法\nfunction finishComponentSetup(instance) {\n    // 判断一下 组件中有没有render方法\n    let Component = instance.vnode.type;\n    if (!instance.render) {\n        // 没有render   // 这里是 模板 =》 render\n        if (!Component.render && Component.template) {\n            instance.render = Component.render;\n        }\n        instance.render = Component.render;\n    }\n    // console.log(instance.render.toString(), \"render\");\n}\nfunction createSetupContext(instance) {\n    return {\n        attrs: instance.attrs,\n        slots: instance.slots,\n        emit: () => { },\n        expose: () => { },\n    };\n}\n","references":["E:/前端学习/vue-source/hand-write-vue3-source/packages/shared/src/index.ts","E:/前端学习/vue-source/hand-write-vue3-source/packages/runtime-core/src/componentPublicIntance.ts"],"dts":{"name":"E:/前端学习/vue-source/hand-write-vue3-source/node_modules/.cache/rollup-plugin-typescript2/placeholder/runtime-core/src/component.d.ts","writeByteOrderMark":false,"text":"export declare const createComponentInstance: (vnode: any) => {\n    vnode: any;\n    type: any;\n    props: {};\n    attrs: {};\n    setupState: {};\n    ctx: {};\n    proxy: {};\n    render: any;\n    data: {\n        a: number;\n    };\n    isMounted: boolean;\n};\nexport declare const setupComponent: (instance: any) => void;\n"}}
