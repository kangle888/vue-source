{"code":"import { isObject, isArray, isIntegerKey, hasOwn, } from \"@vue/shared\";\nimport { reactive, readonly } from \"./reacvtive\";\nimport { Track, trigger } from \"./effect\";\n// get 柯里化方法\nconst get = createGetter(); // 不是仅读的 可以修改(深度)\nconst shallowReactiveGet = createGetter(false, true); // 不是仅读的 可以修改(浅层)\nconst readonlyGet = createGetter(true); // 仅读的 不能修改\nconst shallowReadonlyGet = createGetter(true, true); // 仅读的 不能修改\n// set 柯里化方法\nconst set = createSetter();\nconst shallowReactiveSet = createSetter(true);\n/**\n *\n * @param shallow 是否是浅层\n * @returns\n */\nfunction createSetter(shallow = false) {\n    return function set(target, key, value, receiver) {\n        // 这里需要先获取老值\n        const oldValue = target[key];\n        // 这里是将target 设置为最新的值\n        const res = Reflect.set(target, key, value, receiver);\n        console.log(\"响应式设置\", key, value);\n        // 注意 1 如果是新增属性 2 如果是修改属性\n        // 如果是新增属性 会触发两次 1.添加属性 2.修改属性\n        // 如果是修改属性 会触发一次\n        // 判断数组还是对象  [1,2,3]  Number(key) < target.length这里判断为修改数组\n        let hasKey = isArray(target) && isIntegerKey(key)\n            ? Number(key) < target.length\n            : hasOwn(target, key);\n        if (!hasKey) {\n            console.log(\"新增属性\");\n            // 新增属性\n            trigger(target, 1 /* TrackOpTypes.ADD */, key, value);\n        }\n        else if (oldValue !== value) {\n            console.log(\"修改属性\");\n            // 修改属性\n            trigger(target, 2 /* TrackOpTypes.SET */, key, value, oldValue);\n        }\n        return res;\n    };\n}\n/**\n *\n * @param isReadonly  是否是只读\n * @param shall  是否是浅层\n * @returns\n */\nfunction createGetter(isReadonly = false, shall = false) {\n    // receiver 参数在 get 方法中用于确定在对象或原型链中查找属性时，如何绑定 this 的上下文\n    return function get(target, key, receiver) {\n        const res = Reflect.get(target, key, receiver);\n        console.log(\"响应式获取\", key, res);\n        if (!isReadonly) {\n            // 如果不是仅读的\n            // 收集effect依赖\n            Track(target, 0 /* TrackOpTypes.GET */, key);\n        }\n        if (shall) {\n            // 浅层代理\n            return res;\n        }\n        // 如果是对象 递归代理\n        // 面试--懒代理如果不使用先不代理\n        if (isObject(res)) {\n            return isReadonly ? readonly(res) : reactive(res);\n        }\n        return res;\n    };\n}\nexport const reactiveHandlers = {\n    get,\n    set,\n};\nexport const shallowReactiveHandlers = {\n    get: shallowReactiveGet,\n    set: shallowReactiveSet,\n};\nexport const readonlyHandlers = {\n    get: readonlyGet,\n    set: (target, key, value) => {\n        console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`);\n        return true;\n    },\n};\nexport const shallowReadonlyHandlers = {\n    get: shallowReadonlyGet,\n    set: (target, key, value) => {\n        console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`);\n        return true;\n    },\n};\n// 面试 ： 响应式 api  reactive  proxy 懒代理\n//  readonly   effect  {}\n","references":["D:/个人项目/vue-source/packages/shared/src/index.ts","D:/个人项目/vue-source/packages/reactivity/src/reacvtive.ts","D:/个人项目/vue-source/packages/reactivity/src/operations.ts","D:/个人项目/vue-source/packages/reactivity/src/effect.ts"],"dts":{"name":"D:/个人项目/vue-source/node_modules/.cache/rollup-plugin-typescript2/placeholder/reactivity/src/baseHandlers.d.ts","writeByteOrderMark":false,"text":"export declare const reactiveHandlers: {\n    get: (target: any, key: any, receiver: any) => any;\n    set: (target: any, key: any, value: any, receiver: any) => boolean;\n};\nexport declare const shallowReactiveHandlers: {\n    get: (target: any, key: any, receiver: any) => any;\n    set: (target: any, key: any, value: any, receiver: any) => boolean;\n};\nexport declare const readonlyHandlers: {\n    get: (target: any, key: any, receiver: any) => any;\n    set: (target: any, key: any, value: any) => boolean;\n};\nexport declare const shallowReadonlyHandlers: {\n    get: (target: any, key: any, receiver: any) => any;\n    set: (target: any, key: any, value: any) => boolean;\n};\n"}}
