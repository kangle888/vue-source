{"code":"// createRender\nimport { ShapeFlags } from \"@vueshared\";\nimport { apiCreateApp } from \"./apiCreateApp\";\nimport { createComponentInstance, setupComponent } from \"./component\";\nimport { effect } from \"@vue/reactivity\";\nexport function createRender(renderOptionDom) {\n    // 创建一个effect 让这个render执行\n    function setupRenderEffect(instance) {\n        // 需要创建一个 effect 在 effect 中调用 render 方法，\n        // 这样 render 方法中拿到的数据会收集这个 effect\n        // 属性改变了 会重新执行 effect\n        effect(function componentEffect() {\n            // 判断是否挂载\n            if (!instance.isMounted) {\n                // 获取到render  返回值\n                let proxy = instance.proxy;\n                instance.render.call(proxy, proxy);\n            }\n        });\n    }\n    const mountComponent = (InitialVnode, container) => {\n        // 组件的渲染流程  核心\n        // 1、创建一个组建的实例\n        const instance = (InitialVnode.component =\n            createComponentInstance(InitialVnode));\n        // 2、解析数据到这个实例对象上\n        setupComponent(instance);\n        // 3 、创建一个effect 让这个render执行\n        setupRenderEffect(instance);\n    };\n    // 组件的创建\n    const processComponent = (n1, n2, container) => {\n        if (n1 == null) {\n            // 第一次挂载时\n            // 组件的挂载\n            mountComponent(n2, container);\n        }\n        else {\n            // 组件的更新\n            // updateComponent(n1, n2, container);\n        }\n    };\n    const patch = (n1, n2, container) => {\n        // 针对不同的类型 1 组件  2  元素\n        let { shapeFlag } = n2;\n        if (shapeFlag & ShapeFlags.ELEMENT) {\n            // processElement(n1, n2, container);\n        }\n        else if (shapeFlag & ShapeFlags.STATEFUL_COMPONENT) {\n            processComponent(n1, n2, container);\n        }\n    };\n    let render = (vnode, container) => {\n        console.log(\"render~~~\", vnode);\n        // 这里就得到了虚拟dom ， 然后将虚拟dom转换成真实dom\n        // 渲染  第一次\n        patch(null, vnode, container); // 第一个参数 旧节点 第二个参数 新节点  第三个参数 位置\n    };\n    return {\n        // 创建vNode\n        createApp: apiCreateApp(render),\n    };\n}\n// 给组件 创建一个instance 添加相关信息\n// 处理 setup  中 context 四个参数\n// 通过代理 方便 proxy 取值\n// render (1) setup 返回值是一个函数  就是 render\n// 如果 setup 返回值是一个函数 就执行  源码中  就 是通过一个判断 来解决\n// 如果 setup 返回值是一个对象 就是值\n","references":["D:/个人项目/vue-source/packages/shared/src/index.ts","D:/个人项目/vue-source/packages/runtime-core/src/apiCreateApp.ts","D:/个人项目/vue-source/packages/runtime-core/src/component.ts","D:/个人项目/vue-source/packages/reactivity/src/index.ts"],"dts":{"name":"D:/个人项目/vue-source/node_modules/.cache/rollup-plugin-typescript2/placeholder/runtime-core/src/render.d.ts","writeByteOrderMark":false,"text":"export declare function createRender(renderOptionDom: any): {\n    createApp: (rootComponent: any, rootProps: any) => {\n        _component: any;\n        _props: any;\n        _container: any;\n        mount(rootContainer: any): void;\n    };\n};\n"}}
