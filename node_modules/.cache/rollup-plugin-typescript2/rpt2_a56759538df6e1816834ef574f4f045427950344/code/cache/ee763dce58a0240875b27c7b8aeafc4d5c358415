{"code":"// 处理事件\n//  div  @click=\"handleClick\"  ->  div @click = \"handleClick1\"\n// 元素绑定 是 通过 addEventListener 来绑定的\nexport const patchEvent = (el, key, value) => {\n    // 1、 对函数进行缓存\n    const invokers = el._vei || (el._vei = {});\n    const existingInvoker = invokers[key];\n    if (value && existingInvoker) {\n        // 2、新的和老的都有，更新事件\n        existingInvoker.value = value;\n    }\n    else {\n        const eventName = key.slice(2).toLowerCase();\n        if (value) {\n            //3、新的有,老的没有，添加事件\n            let invoker = (invokers[key] = createInvoker(value));\n            el.addEventListener(eventName, invoker);\n        }\n        else {\n            //4、新的没有，老的有，移除事件\n            el.removeEventListener(eventName, existingInvoker);\n            invokers[key] = undefined; // 清除缓存\n        }\n    }\n};\nconst createInvoker = (value) => {\n    const invoker = (e) => {\n        invoker.value(e);\n    };\n    invoker.value = value;\n    return invoker;\n};\n","references":[],"dts":{"name":"D:/个人项目/vue-source/node_modules/.cache/rollup-plugin-typescript2/placeholder/runtime-dom/src/modules/event.d.ts","writeByteOrderMark":false,"text":"export declare const patchEvent: (el: any, key: any, value: any) => void;\n"}}
