{"code":"// 创建虚拟节点 createVNode  和 h 函数 一样\n// 创建虚拟节点\n// type 组件的类型\n// props 组件的属性\n// children 子节点\n// key\n// el 真实节点\n// shapeFlag\nimport { isArray, isObject, isString, ShapeFlags } from \"@vue/shared\";\n// import { ShapeFlags } from \"@vue/shared\";\nexport const createVNode = (type, props, children = null) => {\n    // 虚拟节点\n    // console.log(\"创建虚拟节点\", rootComponent, rootProps);\n    // vnode  {} 区别是组件还是元素 使用了位移运算符\n    let shapeFlag = isString(type)\n        ? ShapeFlags.ELEMENT\n        : isObject(type)\n            ? ShapeFlags.STATEFUL_COMPONENT\n            : 0;\n    const vnode = {\n        _v_isVNode: true, // 是否是虚拟节点\n        type, // 组件的类型\n        props, // 组件的属性\n        children, // 子节点\n        key: props && props.key, // key\n        el: null, // 真实节点\n        conmponent: {}, // 组件实例\n        shapeFlag,\n    };\n    // 如果有儿子节点\n    normalizeChildren(vnode, children);\n    return vnode;\n};\nfunction normalizeChildren(vnode, children) {\n    let type = 0;\n    if (children === null) {\n        type = 0;\n    }\n    else if (isArray(children)) {\n        type = ShapeFlags.ARRAY_CHILDREN;\n    }\n    else {\n        type = ShapeFlags.TEXT_CHILDREN;\n    }\n    vnode.shapeFlag |= type; // 位运算符 这里是位运算\n    // 例如 0000100 | 0000010 = 0000110\n}\nexport function isVnode(vnode) {\n    // 判断是不是虚拟节点\n    return vnode._v_isVNode;\n}\n// 元素的children 变成vnode\nexport const TEXT = Symbol(\"text\");\nexport function CVnode(child) {\n    if (isObject(child)) {\n        return child;\n    }\n    return createVNode(TEXT, null, child + \"\");\n}\n","references":["E:/前端学习/vue-source/hand-write-vue3-source/packages/shared/src/index.ts"],"dts":{"name":"E:/前端学习/vue-source/hand-write-vue3-source/node_modules/.cache/rollup-plugin-typescript2/placeholder/runtime-core/src/vnode.d.ts","writeByteOrderMark":false,"text":"export declare const createVNode: (type: any, props: any, children?: any) => {\n    _v_isVNode: boolean;\n    type: any;\n    props: any;\n    children: any;\n    key: any;\n    el: any;\n    conmponent: {};\n    shapeFlag: number;\n};\nexport declare function isVnode(vnode: any): any;\nexport declare const TEXT: unique symbol;\nexport declare function CVnode(child: any): any;\n"}}
