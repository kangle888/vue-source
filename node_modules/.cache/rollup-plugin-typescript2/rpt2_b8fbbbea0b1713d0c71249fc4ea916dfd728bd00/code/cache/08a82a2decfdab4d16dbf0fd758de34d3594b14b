{"code":"import { hasChanged } from \"@vueshared\";\nimport { Track, trigger } from \"./effect\";\nexport function ref(value) {\n    return createRef(value);\n}\nexport function shallowRef(value) {\n    return createRef(value, true);\n}\nfunction createRef(rawValue, shallow = false) {\n    // if (isRef(rawValue)) {\n    //   return rawValue;\n    // }\n    return new RefImpl(rawValue, shallow);\n}\n// 创建类\nclass RefImpl {\n    rawValue;\n    shallow;\n    _value;\n    __v_isRef = true;\n    constructor(rawValue, shallow) {\n        this.rawValue = rawValue;\n        this.shallow = shallow;\n        this._value = rawValue;\n    }\n    get value() {\n        // 收集依赖\n        Track(this, 0 /* TrackOpTypes.GET */, \"value\");\n        return this._value;\n    }\n    set value(newVal) {\n        if (hasChanged(newVal, this._value)) {\n            this._value = newVal;\n            this.rawValue = newVal;\n            // 触发更新\n            console.log(\"ref触发更新\");\n            trigger(this, 2 /* TrackOpTypes.SET */, \"value\", newVal);\n        }\n    }\n}\nexport function toRef(object, key) {\n    return new ObjectRefImpl(object, key);\n}\nclass ObjectRefImpl {\n    object;\n    key;\n    __v_isRef = true;\n    constructor(object, key) {\n        this.object = object;\n        this.key = key;\n    }\n    get value() {\n        return this.object[this.key];\n    }\n    set value(newVal) {\n        this.object[this.key] = newVal;\n    }\n}\n","references":["D:/个人项目/vue-source/packages/shared/src/index.ts","D:/个人项目/vue-source/packages/reactivity/src/effect.ts","D:/个人项目/vue-source/packages/reactivity/src/operations.ts"],"dts":{"name":"D:/个人项目/vue-source/node_modules/.cache/rollup-plugin-typescript2/placeholder/reactivity/src/ref.d.ts","writeByteOrderMark":false,"text":"export declare function ref(value: any): RefImpl;\nexport declare function shallowRef(value: any): RefImpl;\ndeclare class RefImpl {\n    rawValue: any;\n    shallow: any;\n    private _value;\n    __v_isRef: boolean;\n    constructor(rawValue: any, shallow: any);\n    get value(): any;\n    set value(newVal: any);\n}\nexport declare function toRef(object: any, key: any): ObjectRefImpl;\ndeclare class ObjectRefImpl {\n    object: any;\n    key: any;\n    __v_isRef: boolean;\n    constructor(object: any, key: any);\n    get value(): any;\n    set value(newVal: any);\n}\nexport {};\n"}}
