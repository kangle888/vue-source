{"code":"// 定义了 effect 函数，用于创建一个响应式的副作用函数\n// effect 函数接收两个参数，第一个参数是一个函数，第二个参数是一个配置对象\n// effect 函数返回一个函数，这个函数就是响应式的副作用函数\nexport function effect(fn, options = {}) {\n    if (fn.effect) {\n        fn = fn.effect;\n    }\n    const effect = createReactiveEffect(fn, options);\n    if (!options.lazy) {\n        effect();\n    }\n    return effect;\n}\nlet uid = 0;\nlet activeEffect;\nfunction createReactiveEffect(fn, options) {\n    //返回一个函数\n    const effect = function reactiveEffect() {\n        // 执行\n        activeEffect = effect;\n        fn();\n    };\n    // 为effect添加属性 effect是函数对象 可以添加属性\n    effect.id = uid++; // 唯一标识区别effect\n    effect._isEffect = true; // 标识是一个effect\n    effect.raw = fn; // 保存原函数\n    effect.options = options; // 报存用户传入的配置\n    return effect;\n}\n// 收集effect依赖 \nexport function Track(target, type, key) {\n    console.log('收集依赖', activeEffect);\n}\n","references":[],"dts":{"name":"E:/前端学习/vue-source/node_modules/.cache/rollup-plugin-typescript2/placeholder/reactivity/src/effect.d.ts","writeByteOrderMark":false,"text":"export declare function effect(fn: any, options?: any): {\n    (): void;\n    id: number;\n    _isEffect: boolean;\n    raw: any;\n    options: any;\n};\nexport declare function Track(target: any, type: any, key: any): void;\n"}}
