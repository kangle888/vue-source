{"code":"import { isFunction } from \"@vueshared\";\nimport { effect } from \"./effect\";\nexport function computed(getterOrOptions) {\n    // 这里的getterOrOptions 可能是一个函数，也可能是一个对象\n    let getter;\n    let setter;\n    if (isFunction(getterOrOptions)) {\n        getter = getterOrOptions;\n        setter = () => {\n            console.warn(\"Write operation failed: computed value is readonly\");\n        };\n    }\n    else {\n        getter = getterOrOptions.get;\n        setter = getterOrOptions.set;\n    }\n    // 返回值\n    return new ComputedRefImpl(getter, setter);\n}\nclass ComputedRefImpl {\n    _setter;\n    // 定义属性\n    _dirty = true; // 默认执行\n    _value; // 缓存值\n    effect; // 用于收集依赖\n    constructor(getter, _setter) {\n        this._setter = _setter;\n        this.effect = effect(getter, {\n            lazy: true,\n            scheduler: () => {\n                if (!this._dirty) {\n                    this._dirty = true;\n                    // 触发更新\n                    // trigger(this, \"set\", \"value\");\n                }\n            },\n        });\n    }\n    get value() {\n        // 获取执行\n        if (this._dirty) {\n            // 这个effect就是  构造函数中的 this.effect\n            this._value = this.effect();\n            this._dirty = false;\n        }\n        // 收集依赖\n        return this._value;\n    }\n    set value(newValue) {\n        this._setter(newValue);\n    }\n}\n","references":["D:/个人项目/vue-source/packages/shared/src/index.ts","D:/个人项目/vue-source/packages/reactivity/src/effect.ts"],"dts":{"name":"D:/个人项目/vue-source/node_modules/.cache/rollup-plugin-typescript2/placeholder/reactivity/src/computed.d.ts","writeByteOrderMark":false,"text":"export declare function computed(getterOrOptions: any): ComputedRefImpl;\ndeclare class ComputedRefImpl {\n    private _setter;\n    _dirty: boolean;\n    _value: any;\n    effect: any;\n    constructor(getter: any, _setter: any);\n    get value(): any;\n    set value(newValue: any);\n}\nexport {};\n"}}
