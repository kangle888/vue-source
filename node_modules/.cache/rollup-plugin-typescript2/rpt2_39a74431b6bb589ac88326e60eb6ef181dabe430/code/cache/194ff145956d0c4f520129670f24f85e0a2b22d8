{"code":"import { isObject } from '@vue/shared';\nimport { reactiveHandlers, shallowReactiveHandlers, readonlyHandlers, shallowReadonlyHandlers } from './baseHandlers';\nexport function reactive(target) {\n    /**\n     * 1. target 是不是对象\n     * 2. false 代表不是 readonly\n     * 3. reactiveHandlers 代表深层代理\n     */\n    return createReactiveObject(target, false, reactiveHandlers); // 高阶函数\n}\nexport function shallowReactive(target) {\n    /**\n     * 1. target 是不是对象\n     * 2. false 代表不是 readonly\n     * 3. shallowReactiveHandlers 代表浅层代理\n     */\n    return createReactiveObject(target, false, shallowReactiveHandlers);\n}\nexport function readonly(target) {\n    /**\n     * 1. target 是不是对象\n     * 2. true 代表是 readonly\n     * 3. readonlyHandlers 代表深层代理\n     */\n    return createReactiveObject(target, true, readonlyHandlers);\n}\nexport function shallowReadonly(target) {\n    /**\n     * 1. target 是不是对象\n     * 2. true 代表是 readonly\n     * 3. shallowReadonlyHandlers 代表浅层代理\n     */\n    return createReactiveObject(target, true, shallowReadonlyHandlers);\n}\n// 核心代理函数实现\n// \nconst reactiveMap = new WeakMap(); // key 只能是对象 自动垃圾回收\nconst readonlyMap = new WeakMap();\nfunction createReactiveObject(target, isReadonly = false, baseHandlers) {\n    // 判断是否是对象\n    if (!isObject(target)) {\n        return target;\n    }\n    // 1. 查找缓存\n    const proxyMap = isReadonly ? readonlyMap : reactiveMap;\n    const exisitingProxy = proxyMap.get(target); // 如果已经代理过了 直接返回\n    if (exisitingProxy) {\n        return exisitingProxy;\n    }\n    // 2. 创建 Proxy\n    const proxy = new Proxy(target, baseHandlers);\n    proxyMap.set(target, proxy);\n    return proxy;\n}\n// 注意 核心 proxy \n","references":["D:/个人项目/vue-source/packages/shared/src/index.ts","D:/个人项目/vue-source/packages/reactivity/src/baseHandlers.ts"],"dts":{"name":"D:/个人项目/vue-source/node_modules/.cache/rollup-plugin-typescript2/placeholder/reactivity/src/reacvtive.d.ts","writeByteOrderMark":false,"text":"export declare function reactive(target: any): any;\nexport declare function shallowReactive(target: any): any;\nexport declare function readonly(target: any): any;\nexport declare function shallowReadonly(target: any): any;\n"}}
